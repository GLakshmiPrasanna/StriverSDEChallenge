class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        int n=nums.size();
        if(n==0)    return 0;
        int longest=1;
        unordered_set<int> s(nums.begin(),nums.end());
        // for(int i=0;i<n;i++)    s.insert(nums[i]);
        for(auto it:s)
        {
            if(s.find(it-1)==s.end())
            {
                int x=it,cnt=1;
                while(s.find(x+1)!=s.end())
                {
                    x=x+1;
                    cnt++;
                }
                longest=max(longest,cnt);
            }
        }
        return longest;
    }
};


// class Solution {
// public:
//     int longestConsecutive(vector<int>& nums) {
//         int n=nums.size();
//         if(n==0)    return 0;
//         int longest=1, cnt=0, lastSmaller=INT_MIN;
//         sort(nums.begin(),nums.end());
//         for(int i=0;i<n;i++)
//         {
//             if(nums[i]-1==lastSmaller)
//             {
//                 lastSmaller=nums[i];
//                 cnt++;
//             }
//             else if(nums[i]!=lastSmaller)
//             {
//                 lastSmaller=nums[i];
//                 cnt=1;
//             }
//             longest=max(longest,cnt);
//         }
//         return longest;
//     }
// };
