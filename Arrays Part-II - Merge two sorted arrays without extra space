//Gap Method(has been taken from Shell sort)
class Solution {
private:
void swapfunc(vector<int> &n1,vector<int> &n2,int l,int r)
{
    if(n1[l]>n2[r]) swap(n1[l],n2[r]);
}
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int l=m+n;
        int gap=(l/2)+(l%2); //ceil of gap
        while(gap>0)
        {
            int left=0;int right=gap;
            while(right<l)
            {
                //nums1 and nums2
                if(left<m and right>=m)
                {
                    swapfunc(nums1,nums2,left,right-m);
                }
                //nums1
                else if(right<m)
                {
                    swapfunc(nums1,nums1,left,right);
                }
                //nums2
                else
                {
                    swapfunc(nums2,nums2,left-m,right-m);
                }
                left++;
                right++;
            }
            if(gap==1)  break;
            gap=(gap/2)+(gap%2);
        }
        for(int i=m;i<m+n;i++)  nums1[i]=nums2[i-m];
    }
};



// class Solution {
// public:
//     void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
//         int left=m-1,right=0;
//         while(left>=0 && right<n)
//         {
//             if(nums1[left]>nums2[right])
//             {
//                 swap(nums1[left],nums2[right]);
//                 left--;
//                 right++;
//             }
//             else
//             {
//                 break;
//             }
//         }
//         sort(nums1.begin(),nums1.end()-n);
//         sort(nums2.begin(),nums2.end());
//         for(int i=m;i<m+n;i++)  nums1[i]=nums2[i-m];
//     }
// };
