class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        int n=nums.size();
        map<int,int> m;
        for(int i=0;i<n;i++)
        {
            auto it=m.find(target-nums[i]);
            if(it!=m.end()) return{it->second,i};
            m[nums[i]]=i;
        }
        return {0};
    }
};


class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int,vector<int>>mp;
        for(int i=0;i<nums.size();i++)
        {
            mp[nums[i]].push_back(i);
        }
        for(int i=0;i<nums.size();i++)
        {
                if(nums[i]*2==target)
                {
                    if(mp[nums[i]].size()>1) return mp[nums[i]];
                }
                else
                {
                    if(mp[target-nums[i]].size()) return {i,mp[target-nums[i]][0]};
                }
        }
        return {0,0};
    }
}


// class Solution {
// public:
//     vector<int> twoSum(vector<int>& nums, int target) {
//         int n=nums.size();
//         int i,j;
//         for(i=0;i<n;i++)
//         {
//             for(j=i+1;j<n;j++)
//             {
//                 if(nums[i]+nums[j]==target) return {i,j};
//             }
//         }
//         return {0};
//     }
// };
