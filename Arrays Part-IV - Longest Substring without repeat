class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        unordered_map<char,int> m;
        int l=0,r=0;
        int len=0;
        while(r<s.size())
        {
            if(m.find(s[r])!=m.end())   l=max(l,m[s[r]]+1);
            len=max(len,r-l+1);
            m[s[r]]=r;
            r++;
        }
        return len;
    }
};


// class Solution {
// public:
//     int lengthOfLongestSubstring(string s) {
//         set<char> st;
//         int l=0,r=0;
//         int len=0;
//         while(r<s.size())
//         {
//             while(st.find(s[r])!=st.end())
//             {
//                 auto it=s[l];
//                 st.erase(it);
//                 l++;
//             }
//             len=max(len,r-l+1);
//             st.insert(s[r]);
//             r++;
//         }
//         return len;
//     }
// };
