                                            //GFG
/* Node structure  used in the program

struct Node{
	int data;
	struct Node * next;
	struct Node * bottom;
	
	Node(int x){
	    data = x;
	    next = NULL;
	    bottom = NULL;
	}
	
};
*/

/*  Function which returns the  root of 
    the flattened linked list. */
Node *merge(Node *a, Node *b)
{
    Node *temp=new Node(0);
    Node *start=temp;
    while(a!=NULL && b!=NULL)
    {
        if(a->data <= b->data)
        {
            temp->bottom=a;
            temp=a;
            a=a->bottom;
        }
        else
        {
            temp->bottom=b;
            temp=b;
            b=b->bottom;
        }
    }
    if(a!=NULL) temp->bottom=a;
    else    temp->bottom=b;
    return start->bottom;
}
Node *flatten(Node *root)
{
   // Your code here
   if(root==NULL || root->next==NULL)   return root;
   root->next=flatten(root->next);
   return merge(root,root->next);
}


                                                        // CODE STUDIO
/*
 * Definition for linked list.
 * class Node {
 *  public:
 *		int data;
 *		Node *next;
 * 		Node *child;
 *		Node() : data(0), next(nullptr), child(nullptr){};
 *		Node(int x) : data(x), next(nullptr), child(nullptr) {}
 *		Node(int x, Node *next, Node *child) : data(x), next(next), child(child) {}
 * };
 */
Node *merge(Node *a, Node *b)
{
    Node *temp=new Node(0);
    Node *start=temp;
    while(a!=NULL && b!=NULL)
    {
        if(a->data <= b->data)
        {
            temp->child=a;
            temp=a;
            a=a->child;
        }
        else
        {
            temp->child=b;
            temp=b;
            b=b->child;
        }
    }
    if(a!=NULL) temp->child=a;
    else    temp->child=b;
    return start->child;
}
Node* flattenLinkedList(Node* head) 
{
	if(head==NULL || head->next==NULL)   return head;
	Node* node=flattenLinkedList(head->next);
    head->next=NULL;
	head=merge(head,node);
	return head;
}
